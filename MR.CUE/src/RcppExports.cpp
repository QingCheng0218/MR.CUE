// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <iostream>
#include <thread>
#include <mutex>
#include <random>
#include "GibbsGamgamEta_ptr.hpp"


using namespace Rcpp;
using namespace arma;
using namespace std;


#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// load_block_file
vector<umat> load_block_file(string block_file);
RcppExport SEXP _MR_CUE_load_block_file(SEXP block_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type block_file(block_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(load_block_file(block_file));
    return rcpp_result_gen;
END_RCPP
}
// test_blocks
List test_blocks(arma::ivec bp, arma::ivec chr, std::string block_file);
RcppExport SEXP _MR_CUE_test_blocks(SEXP bpSEXP, SEXP chrSEXP, SEXP block_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::string >::type block_file(block_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(test_blocks(bp, chr, block_file));
    return rcpp_result_gen;
END_RCPP
}
// std_setdiff
arma::ivec std_setdiff(arma::ivec& x, arma::ivec& y);
RcppExport SEXP _MR_CUE_std_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(std_setdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// LDclump
ivec LDclump(arma::mat& R, double ld_r2_thresh);
RcppExport SEXP _MR_CUE_LDclump(SEXP RSEXP, SEXP ld_r2_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type ld_r2_thresh(ld_r2_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(LDclump(R, ld_r2_thresh));
    return rcpp_result_gen;
END_RCPP
}
// Cal_blockR
List Cal_blockR(arma::ivec& bp, arma::ivec& chr, arma::uvec& avbIndex, arma::uvec& idx4panel, std::string block_file, std::string stringname3, double ld_r2_thresh, int coreNum, double lam);
RcppExport SEXP _MR_CUE_Cal_blockR(SEXP bpSEXP, SEXP chrSEXP, SEXP avbIndexSEXP, SEXP idx4panelSEXP, SEXP block_fileSEXP, SEXP stringname3SEXP, SEXP ld_r2_threshSEXP, SEXP coreNumSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type avbIndex(avbIndexSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type idx4panel(idx4panelSEXP);
    Rcpp::traits::input_parameter< std::string >::type block_file(block_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< double >::type ld_r2_thresh(ld_r2_threshSEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_blockR(bp, chr, avbIndex, idx4panel, block_file, stringname3, ld_r2_thresh, coreNum, lam));
    return rcpp_result_gen;
END_RCPP
}
// Cal_block_Rmatrix
List Cal_block_Rmatrix(arma::ivec& bp, arma::ivec& chr, arma::uvec& avbIndex, arma::uvec& idx4panel, std::string block_file, std::string stringname3, double ld_r2_thresh, int coreNum, double lam);
RcppExport SEXP _MR_CUE_Cal_block_Rmatrix(SEXP bpSEXP, SEXP chrSEXP, SEXP avbIndexSEXP, SEXP idx4panelSEXP, SEXP block_fileSEXP, SEXP stringname3SEXP, SEXP ld_r2_threshSEXP, SEXP coreNumSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type avbIndex(avbIndexSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type idx4panel(idx4panelSEXP);
    Rcpp::traits::input_parameter< std::string >::type block_file(block_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< double >::type ld_r2_thresh(ld_r2_threshSEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_block_Rmatrix(bp, chr, avbIndex, idx4panel, block_file, stringname3, ld_r2_thresh, coreNum, lam));
    return rcpp_result_gen;
END_RCPP
}
// Cal_blockinf
List Cal_blockinf(arma::ivec& bp, arma::ivec& chr, std::string block_file);
RcppExport SEXP _MR_CUE_Cal_blockinf(SEXP bpSEXP, SEXP chrSEXP, SEXP block_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< std::string >::type block_file(block_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_blockinf(bp, chr, block_file));
    return rcpp_result_gen;
END_RCPP
}
// IndepSummary
Rcpp::List IndepSummary(arma::ivec& bp, arma::ivec& chr, arma::uvec& avbIndex, std::string& block_file, std::string stringname3, arma::vec& bh1, arma::vec& bh2, arma::vec& se1, arma::vec& se2, int coreNum, double lam, const double& ld_r2_thresh);
RcppExport SEXP _MR_CUE_IndepSummary(SEXP bpSEXP, SEXP chrSEXP, SEXP avbIndexSEXP, SEXP block_fileSEXP, SEXP stringname3SEXP, SEXP bh1SEXP, SEXP bh2SEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP coreNumSEXP, SEXP lamSEXP, SEXP ld_r2_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type avbIndex(avbIndexSEXP);
    Rcpp::traits::input_parameter< std::string& >::type block_file(block_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bh1(bh1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bh2(bh2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type ld_r2_thresh(ld_r2_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(IndepSummary(bp, chr, avbIndex, block_file, stringname3, bh1, bh2, se1, se2, coreNum, lam, ld_r2_thresh));
    return rcpp_result_gen;
END_RCPP
}
// testR
double testR(double rho, int n);
RcppExport SEXP _MR_CUE_testR(SEXP rhoSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(testR(rho, n));
    return rcpp_result_gen;
END_RCPP
}
// comb
imat comb(int p);
RcppExport SEXP _MR_CUE_comb(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(comb(p));
    return rcpp_result_gen;
END_RCPP
}
// Mat2Vec
vec Mat2Vec(mat R);
RcppExport SEXP _MR_CUE_Mat2Vec(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Mat2Vec(R));
    return rcpp_result_gen;
END_RCPP
}
// Vec2Mat
mat Vec2Mat(vec RV, int p1);
RcppExport SEXP _MR_CUE_Vec2Mat(SEXP RVSEXP, SEXP p1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type RV(RVSEXP);
    Rcpp::traits::input_parameter< int >::type p1(p1SEXP);
    rcpp_result_gen = Rcpp::wrap(Vec2Mat(RV, p1));
    return rcpp_result_gen;
END_RCPP
}
// Cal_block_Rvec
List Cal_block_Rvec(arma::ivec& bp, arma::ivec& chr, arma::uvec& avbIndex, std::string block_file, std::string stringname3, int coreNum, double lam);
RcppExport SEXP _MR_CUE_Cal_block_Rvec(SEXP bpSEXP, SEXP chrSEXP, SEXP avbIndexSEXP, SEXP block_fileSEXP, SEXP stringname3SEXP, SEXP coreNumSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type avbIndex(avbIndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type block_file(block_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_block_Rvec(bp, chr, avbIndex, block_file, stringname3, coreNum, lam));
    return rcpp_result_gen;
END_RCPP
}
// MRCUEIndep
List MRCUEIndep(arma::vec& gammah, arma::vec& Gammah, arma::vec& se1, arma::vec& se2, double& rho, SEXP opts);
RcppExport SEXP _MR_CUE_MRCUEIndep(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP rhoSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(MRCUEIndep(gammah, Gammah, se1, se2, rho, opts));
    return rcpp_result_gen;
END_RCPP
}
// MRCUESim
Rcpp::List MRCUESim(arma::vec& gammah, arma::vec& Gammah, arma::vec& se1, arma::vec& se2, double rho, arma::mat R, arma::umat block_inf, int coreNum, SEXP opts);
RcppExport SEXP _MR_CUE_MRCUESim(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP rhoSEXP, SEXP RSEXP, SEXP block_infSEXP, SEXP coreNumSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type block_inf(block_infSEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(MRCUESim(gammah, Gammah, se1, se2, rho, R, block_inf, coreNum, opts));
    return rcpp_result_gen;
END_RCPP
}
// MRCUE
Rcpp::List MRCUE(arma::field<vec> F4gammah, arma::field<vec> F4Gammah, arma::field<vec> F4se1, arma::field<vec> F4se2, arma::field<mat> F4Rblock, double rho, int coreNum, SEXP opts);
RcppExport SEXP _MR_CUE_MRCUE(SEXP F4gammahSEXP, SEXP F4GammahSEXP, SEXP F4se1SEXP, SEXP F4se2SEXP, SEXP F4RblockSEXP, SEXP rhoSEXP, SEXP coreNumSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4gammah(F4gammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4Gammah(F4GammahSEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se1(F4se1SEXP);
    Rcpp::traits::input_parameter< arma::field<vec> >::type F4se2(F4se2SEXP);
    Rcpp::traits::input_parameter< arma::field<mat> >::type F4Rblock(F4RblockSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(MRCUE(F4gammah, F4Gammah, F4se1, F4se2, F4Rblock, rho, coreNum, opts));
    return rcpp_result_gen;
END_RCPP
}
// getLineNum
int getLineNum(std::string filename);
RcppExport SEXP _MR_CUE_getLineNum(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(getLineNum(filename));
    return rcpp_result_gen;
END_RCPP
}
// ReadSNPinfo
Rcpp::List ReadSNPinfo(std::string stringname, IntegerVector A1, IntegerVector A2, CharacterVector rsname, IntegerVector chr, IntegerVector bp, NumericVector morgan, int N);
RcppExport SEXP _MR_CUE_ReadSNPinfo(SEXP stringnameSEXP, SEXP A1SEXP, SEXP A2SEXP, SEXP rsnameSEXP, SEXP chrSEXP, SEXP bpSEXP, SEXP morganSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname(stringnameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type A2(A2SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rsname(rsnameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadSNPinfo(stringname, A1, A2, rsname, chr, bp, morgan, N));
    return rcpp_result_gen;
END_RCPP
}
// Read_summarystat
void Read_summarystat(std::string stringname, IntegerVector SA1, IntegerVector SA2, CharacterVector rsname, NumericVector betah, NumericVector s2, NumericVector pvalue, IntegerVector chr, IntegerVector bp, int N);
RcppExport SEXP _MR_CUE_Read_summarystat(SEXP stringnameSEXP, SEXP SA1SEXP, SEXP SA2SEXP, SEXP rsnameSEXP, SEXP betahSEXP, SEXP s2SEXP, SEXP pvalueSEXP, SEXP chrSEXP, SEXP bpSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname(stringnameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SA1(SA1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SA2(SA2SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rsname(rsnameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betah(betahSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pvalue(pvalueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Read_summarystat(stringname, SA1, SA2, rsname, betah, s2, pvalue, chr, bp, N);
    return R_NilValue;
END_RCPP
}
// select
CharacterVector select(CharacterVector vec_, NumericVector idx_);
RcppExport SEXP _MR_CUE_select(SEXP vec_SEXP, SEXP idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vec_(vec_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type idx_(idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(select(vec_, idx_));
    return rcpp_result_gen;
END_RCPP
}
// matchsnp
Rcpp::List matchsnp(std::string stringname1, std::string stringname2, std::string stringname3, bool matchExp);
RcppExport SEXP _MR_CUE_matchsnp(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP matchExpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< bool >::type matchExp(matchExpSEXP);
    rcpp_result_gen = Rcpp::wrap(matchsnp(stringname1, stringname2, stringname3, matchExp));
    return rcpp_result_gen;
END_RCPP
}
// matchscreen
Rcpp::List matchscreen(std::string screenname, std::string stringname1, std::string stringname2, std::string stringname3, double pva_cutoff, bool matchExp);
RcppExport SEXP _MR_CUE_matchscreen(SEXP screennameSEXP, SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP pva_cutoffSEXP, SEXP matchExpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type screenname(screennameSEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< double >::type pva_cutoff(pva_cutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type matchExp(matchExpSEXP);
    rcpp_result_gen = Rcpp::wrap(matchscreen(screenname, stringname1, stringname2, stringname3, pva_cutoff, matchExp));
    return rcpp_result_gen;
END_RCPP
}
// Cal_block_SimR
mat Cal_block_SimR(umat block_inf, arma::umat& X, double lam);
RcppExport SEXP _MR_CUE_Cal_block_SimR(SEXP block_infSEXP, SEXP XSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type block_inf(block_infSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Cal_block_SimR(block_inf, X, lam));
    return rcpp_result_gen;
END_RCPP
}
// fastSigLm
List fastSigLm(const arma::vec& y, const arma::mat& X);
RcppExport SEXP _MR_CUE_fastSigLm(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSigLm(y, X));
    return rcpp_result_gen;
END_RCPP
}
// normal_pdf
double normal_pdf(double x, double m, double s);
RcppExport SEXP _MR_CUE_normal_pdf(SEXP xSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(x, m, s));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MR_CUE_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MR_CUE_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MR_CUE_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MR_CUE_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// phi
double phi(double x);
RcppExport SEXP _MR_CUE_phi(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(phi(x));
    return rcpp_result_gen;
END_RCPP
}
// cdfNormal
double cdfNormal(double x, double mean, double sd);
RcppExport SEXP _MR_CUE_cdfNormal(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfNormal(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// MulticdfNormal
arma::vec MulticdfNormal(arma::vec& x);
RcppExport SEXP _MR_CUE_MulticdfNormal(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MulticdfNormal(x));
    return rcpp_result_gen;
END_RCPP
}
// multiphi
arma::vec multiphi(arma::vec x);
RcppExport SEXP _MR_CUE_multiphi(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiphi(x));
    return rcpp_result_gen;
END_RCPP
}
// inverseNormal
double inverseNormal(double prob, double mean, double sd);
RcppExport SEXP _MR_CUE_inverseNormal(SEXP probSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseNormal(prob, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// MultiinverseNormal
arma::vec MultiinverseNormal(arma::vec& prob);
RcppExport SEXP _MR_CUE_MultiinverseNormal(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(MultiinverseNormal(prob));
    return rcpp_result_gen;
END_RCPP
}
// MatSum
arma::mat MatSum(arma::vec& y1, arma::vec& y2);
RcppExport SEXP _MR_CUE_MatSum(SEXP y1SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(MatSum(y1, y2));
    return rcpp_result_gen;
END_RCPP
}
// truncEstfun
arma::vec truncEstfun(arma::vec& a, arma::vec& b, arma::vec& x1, arma::vec& x2, int maxIter, int burnin, int thin);
RcppExport SEXP _MR_CUE_truncEstfun(SEXP aSEXP, SEXP bSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP maxIterSEXP, SEXP burninSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(truncEstfun(a, b, x1, x2, maxIter, burnin, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MR_CUE_load_block_file", (DL_FUNC) &_MR_CUE_load_block_file, 1},
    {"_MR_CUE_test_blocks", (DL_FUNC) &_MR_CUE_test_blocks, 3},
    {"_MR_CUE_std_setdiff", (DL_FUNC) &_MR_CUE_std_setdiff, 2},
    {"_MR_CUE_LDclump", (DL_FUNC) &_MR_CUE_LDclump, 2},
    {"_MR_CUE_Cal_blockR", (DL_FUNC) &_MR_CUE_Cal_blockR, 9},
    {"_MR_CUE_Cal_block_Rmatrix", (DL_FUNC) &_MR_CUE_Cal_block_Rmatrix, 9},
    {"_MR_CUE_Cal_blockinf", (DL_FUNC) &_MR_CUE_Cal_blockinf, 3},
    {"_MR_CUE_IndepSummary", (DL_FUNC) &_MR_CUE_IndepSummary, 12},
    {"_MR_CUE_testR", (DL_FUNC) &_MR_CUE_testR, 2},
    {"_MR_CUE_comb", (DL_FUNC) &_MR_CUE_comb, 1},
    {"_MR_CUE_Mat2Vec", (DL_FUNC) &_MR_CUE_Mat2Vec, 1},
    {"_MR_CUE_Vec2Mat", (DL_FUNC) &_MR_CUE_Vec2Mat, 2},
    {"_MR_CUE_Cal_block_Rvec", (DL_FUNC) &_MR_CUE_Cal_block_Rvec, 7},
    {"_MR_CUE_MRCUEIndep", (DL_FUNC) &_MR_CUE_MRCUEIndep, 6},
    {"_MR_CUE_MRCUESim", (DL_FUNC) &_MR_CUE_MRCUESim, 9},
    {"_MR_CUE_MRCUE", (DL_FUNC) &_MR_CUE_MRCUE, 8},
    {"_MR_CUE_getLineNum", (DL_FUNC) &_MR_CUE_getLineNum, 1},
    {"_MR_CUE_ReadSNPinfo", (DL_FUNC) &_MR_CUE_ReadSNPinfo, 8},
    {"_MR_CUE_Read_summarystat", (DL_FUNC) &_MR_CUE_Read_summarystat, 10},
    {"_MR_CUE_select", (DL_FUNC) &_MR_CUE_select, 2},
    {"_MR_CUE_matchsnp", (DL_FUNC) &_MR_CUE_matchsnp, 4},
    {"_MR_CUE_matchscreen", (DL_FUNC) &_MR_CUE_matchscreen, 6},
    {"_MR_CUE_Cal_block_SimR", (DL_FUNC) &_MR_CUE_Cal_block_SimR, 3},
    {"_MR_CUE_fastSigLm", (DL_FUNC) &_MR_CUE_fastSigLm, 2},
    {"_MR_CUE_normal_pdf", (DL_FUNC) &_MR_CUE_normal_pdf, 3},
    {"_MR_CUE_rcpparma_hello_world", (DL_FUNC) &_MR_CUE_rcpparma_hello_world, 0},
    {"_MR_CUE_rcpparma_outerproduct", (DL_FUNC) &_MR_CUE_rcpparma_outerproduct, 1},
    {"_MR_CUE_rcpparma_innerproduct", (DL_FUNC) &_MR_CUE_rcpparma_innerproduct, 1},
    {"_MR_CUE_rcpparma_bothproducts", (DL_FUNC) &_MR_CUE_rcpparma_bothproducts, 1},
    {"_MR_CUE_phi", (DL_FUNC) &_MR_CUE_phi, 1},
    {"_MR_CUE_cdfNormal", (DL_FUNC) &_MR_CUE_cdfNormal, 3},
    {"_MR_CUE_MulticdfNormal", (DL_FUNC) &_MR_CUE_MulticdfNormal, 1},
    {"_MR_CUE_multiphi", (DL_FUNC) &_MR_CUE_multiphi, 1},
    {"_MR_CUE_inverseNormal", (DL_FUNC) &_MR_CUE_inverseNormal, 3},
    {"_MR_CUE_MultiinverseNormal", (DL_FUNC) &_MR_CUE_MultiinverseNormal, 1},
    {"_MR_CUE_MatSum", (DL_FUNC) &_MR_CUE_MatSum, 2},
    {"_MR_CUE_truncEstfun", (DL_FUNC) &_MR_CUE_truncEstfun, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_MR_CUE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
